{"version":3,"sources":["components/loading/LoadingContainer.js","components/LocationForm.js","components/CurrentForecast.js","components/Forecast.js","components/ForecastDetails.js","containers/ForecastContainer.js","containers/MainContainer.js","redux/actions/storeActions.js"],"names":["LoadingContainer","Fragment","this","props","loading","LoadingSpinner","children","Component","defaultProps","LocationForm","changeHandler","searchCity","searchCityKeyPress","city","className","name","placeholder","onChange","required","onClick","onKeyPress","e","disabled","CurrentForeCast","currentDate","timezone","windSpeed","tempCur","tempMin","tempMax","weatherMain","weatherIcon","weatherDesc","formatCurrentDate","moment","unix","format","Card","CardBody","Row","Col","md","CardText","CardImg","src","apiConfig","openWeather","API_ICON_URL","alt","Forecast","date","showThreeHours","curDate","replace","formatDate","Button","color","ForecastDetails","xs","ForecastContainer","selectedDate","threeHoursData","fiveDaysForeCastData","list","filter","F","dt_txt","includes","setState","setTimeout","scrollSectionTop","document","getElementById","offsetTop","window","scrollTo","top","left","behavior","state","fiveDaysData","Object","values","map","item","index","key","wind","speed","clouds","main","temp","temp_min","temp_max","weather","icon","id","description","MainContainer","fetchCurrentForecast","fetchFiveDaysForecast","seachCityKeyPress","keycode","preventDefault","target","value","ajaxStatus","currentForeCastData","isLoading","isServerError","Alert","serverMessage","CurrentForecast","dt","sys","country","lat","coord","lot","lon","all","connect","store","dispatch","a","apiCity","cityUrl","API_URL","PARAM","API_KEY","type","FETCH_PENDING","axios","get","response","data","FETCH_CURRENT_FORECAST","FETCH_COMPLETE","console","log","SERVER_ERROR","serverStatus","status","message","forecastUrl","FETCH_FIVE_DAYS_FORECAST"],"mappings":"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","file":"static/js/4.93331f2a.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport LoadingSpinner from './LoadingSpinner';\n\nexport default class LoadingContainer extends Component {\n  static propTypes = {\n    loading: PropTypes.bool,\n    children: PropTypes.node.isRequired\n  }\n\n  static defaultProps = {\n    loading: false\n  }\n\n  render() {\n    return (\n        <React.Fragment>\n            {this.props.loading ? <LoadingSpinner /> : this.props.children}\n        </React.Fragment>\n    );\n  }\n}\n","import React from 'react';\n\nconst LocationForm = props => {\n\n    const { changeHandler, searchCity, searchCityKeyPress, city } = props;\n\n    return ( \n        <div className=\"locationForm\">\n            <input name=\"city\" placeholder=\"Hong Kong\" onChange={changeHandler} required/>\n            <button \n                onClick={searchCity}\n                onKeyPress={(e) => searchCityKeyPress}\n                disabled={!city}> Search </button>\n        </div>\n    );\n}\n \nexport default LocationForm;","import React from 'react';\nimport apiConfig from '../redux/actions/config';\nimport {\n    Card, CardImg, CardText, CardBody,Row, Col\n  } from 'reactstrap';\nimport moment from 'moment';\n\nconst CurrentForeCast = props => {\n    const {city,currentDate,timezone,windSpeed,tempCur,tempMin,tempMax,weatherMain,weatherIcon,weatherDesc} = props;\n    let formatCurrentDate = moment.unix(currentDate, timezone).format('YYYY-MM-DD, ddd');\n\n    return ( \n        <Card className={`currentForeCastContainer ${weatherIcon}`}>\n            <CardBody >\n                <Row>\n                    <Col md=\"7\">\n                        <h1>{formatCurrentDate}</h1>\n                        <h1>{city} </h1>\n                        <h2>{tempCur}°C</h2>\n                        <CardText className=\"tempText\">Min: {tempMin}°C / Max: {tempMax}°C</CardText>\n                    </Col>\n                    <Col md=\"5\">\n                        <CardImg className=\"weatherIcon txt-right\" src={`${apiConfig.openWeather.API_ICON_URL}${weatherIcon}@2x.png`} alt={weatherMain} />\n                        <h4>{weatherMain}</h4>\n                        <CardText className=\"weatherDesc\">{weatherDesc}</CardText>\n                        <CardText>Wind Speed: {windSpeed} </CardText>\n                    </Col>\n                </Row>\n            </CardBody>\n        </Card>\n    );\n}\n\nexport default CurrentForeCast;","import React from 'react';\nimport apiConfig from '../redux/actions/config';\nimport {\n    Card, CardImg, CardText, CardBody, Button\n  } from 'reactstrap';\nimport moment from 'moment';\n  \nconst Forecast = props => {\n    const {date,tempCur,tempMin,tempMax,weatherMain,weatherIcon,showThreeHours} = props;\n    let curDate  = date.replace('00:00:00','');\n    let formatDate = moment(curDate).format('YYYY-MM-DD, ddd');\n\n    return ( \n      <React.Fragment>\n            <Card className={`forecast ${weatherIcon}`}>\n                <CardBody className=\"\">\n                    <h4 className=\"weatherDate\">{formatDate}</h4>\n                    <CardImg src={`${apiConfig.openWeather.API_ICON_URL}${weatherIcon}@2x.png`} alt={weatherMain} /> \n                    <h2>{tempCur}°C</h2>\n                    <CardText className=\"tempText\">{tempMin}°C / <b>{tempMax}°C</b></CardText>\n                    <Button color=\"secondary\" onClick={() => showThreeHours(curDate)}>Show Details</Button>\n                </CardBody>\n            </Card>\n        </React.Fragment>\n    )    \n}\n \nexport default Forecast","import React from 'react';\nimport apiConfig from '../redux/actions/config';\n\nimport { Card, CardImg, CardText, CardBody, Row, Col } from 'reactstrap';\nimport moment from 'moment';\n  \nconst ForecastDetails = props => {\n    const {date,tempCur,tempMin,tempMax,weatherMain,weatherIcon,weatherDesc,windSpeed} = props;\n    let formatDate = moment(date).format('YYYY-MM-DD, ddd hh:mm A');\n\n    return ( \n      <React.Fragment>\n            <Card className={`forecastDetails ${weatherIcon}`}>\n                <CardBody>\n                    <Row>\n                        <Col md=\"7\">\n                            <h5 className=\"weatherDate\">{formatDate}</h5>\n                            <Row>\n                                <Col>\n                                    <h2>{tempCur}°C</h2>\n                                    <CardText>{tempMin}°C / <b>{tempMax}°C</b></CardText>\n                                </Col>\n                                <Col xs=\"5\"><CardImg src={`${apiConfig.openWeather.API_ICON_URL}${weatherIcon}@2x.png`} alt={weatherMain} /></Col>\n                            </Row>\n                        </Col>\n                        <Col md=\"5\">\n                            <h4>{weatherMain}</h4>\n                            <CardText className=\"weatherDesc\">{weatherDesc}</CardText>\n                            <CardText>Wind Speed: {windSpeed} </CardText>\n                        </Col>\n                    </Row>\n                    \n                </CardBody>\n            </Card>\n        </React.Fragment>\n    )    \n}\n \nexport default ForecastDetails","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Forecast from '../components/Forecast';  //Show Forecast Preview by 5 days\nimport ForecastDetails from '../components/ForecastDetails';    //Show Details by 3 hours\n\nclass ForecastContainer extends Component {\n    constructor (props){\n        super(props);\n        this.state = {\n            threeHoursData: {}\n        }\n    }\n\n    static propTypes = {\n        fiveDaysForeCastData: PropTypes.object.isRequired,\n    };\n\n    showThreeHours = (selectedDate) => {\n        const threeHoursData = this.props.fiveDaysForeCastData.list.filter(F => F.dt_txt.includes(selectedDate));\n        this.setState({\n            threeHoursData\n        });\n        \n        setTimeout(function() {\n            let scrollSectionTop = document.getElementById('foreCastDetailsContainer').offsetTop - 50;\n            window.scrollTo({\n                top: scrollSectionTop,\n                left: 0,\n                behavior: 'smooth'\n              });\n        }, 200);\n        \n    }\n\n    render() {\n        const { fiveDaysForeCastData} = this.props;\n        const { threeHoursData} =  this.state;\n        let fiveDaysData = fiveDaysForeCastData.list.filter(F => F.dt_txt.includes('00:00:00'));\n        \n        return (\n            <React.Fragment>\n                <h2>Coming Five Days</h2>\n                <div className=\"forecastContainer\">\n                    {\n                        Object.values(fiveDaysData).map((item, index) =>{\n                            return(\n                                <Forecast\n                                    key={index}\n                                    date={item.dt_txt}\n                                    windSpeed={item.wind.speed}\n                                    clouds={item.clouds}\n                                    tempCur={item.main.temp}\n                                    tempMin={item.main.temp_min}\n                                    tempMax={item.main.temp_max}\n                                    weatherMain={item.weather[0].main}\n                                    weatherIcon={item.weather[0].icon}\n                                    showThreeHours={this.showThreeHours}\n                                />\n                            )\n                        })\n                    }\n                </div>\n                {threeHoursData && <div className=\"foreCastDetailsContainer\" id=\"foreCastDetailsContainer\">\n                    {\n                        Object.values(threeHoursData).map((item, index) =>{\n                            return (\n                                <ForecastDetails\n                                    key={index}\n                                    date={item.dt_txt}\n                                    windSpeed={item.wind.speed}\n                                    clouds={item.clouds}\n                                    tempCur={item.main.temp}\n                                    tempMin={item.main.temp_min}\n                                    tempMax={item.main.temp_max}\n                                    weatherMain={item.weather[0].main}\n                                    weatherIcon={item.weather[0].icon}\n                                    weatherDesc={item.weather[0].description}\n                                />\n                            )\n                        })\n                    }\n                    </div>\n                }\n            </React.Fragment>\n         );\n    }\n}\n \nexport default ForecastContainer;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Alert } from 'reactstrap';\n\nimport { fetchCurrentForecast, fetchFiveDaysForecast } from '../redux/actions/storeActions';\n\nimport LoadingContainer from '../components/loading/LoadingContainer';\nimport LocationForm from '../components/LocationForm';\nimport CurrentForecast from '../components/CurrentForecast';\nimport ForecastContainer from './ForecastContainer';\n\nexport class MainContainer extends Component {\n    static propTypes = {\n        ajaxStatus: PropTypes.object.isRequired,\n        fetchCurrentForecast: PropTypes.func.isRequired,\n        fetchFiveDaysForecast: PropTypes.func.isRequired\n    };\n\n    state = {\n        city: ''\n    }\n\n    componentDidMount() { //default load Hong Kong weather\n        this.props.fetchCurrentForecast('Hong Kong');\n        this.props.fetchFiveDaysForecast('Hong Kong');\n    }\n\n    searchCity = () => {\n        // console.log(this.state.city);\n        this.props.fetchCurrentForecast(this.state.city);\n        this.props.fetchFiveDaysForecast(this.state.city);\n        this.setState=({\n            city: ''\n        })\n    }\n\n    seachCityKeyPress = (e) => {\n        if (e.keycode === 13){\n            this.props.fetchCurrentForecast(this.state.city);\n            this.props.fetchFiveDaysForecast(this.state.city);\n        }\n    }\n\n    changeHandler = (e) =>{\n        e.preventDefault();\n        let city = e.target.value;  //get the value from the input\n        this.setState({\n            city\n        });\n    }\n\n    render() {\n        const { ajaxStatus, currentForeCastData, fiveDaysForeCastData } = this.props;\n        const { city } = this.state;\n\n        return (\n            <div className=\"container\">\n                <h1 className=\"header\">Weather App </h1>\n                <LoadingContainer loading={ajaxStatus.isLoading}>\n                    <LocationForm\n                        changeHandler={this.changeHandler}\n                        searchCity={this.searchCity}\n                        searchCityKeyPress={this.searchCityKeyPress}\n                        city={city}\n                    />\n                    {ajaxStatus.isServerError === true && <Alert color=\"danger\">\n                        {ajaxStatus.serverMessage}\n                    </Alert>}\n                    <div className=\"dashboard\">\n                        <CurrentForecast\n                            key={currentForeCastData.id}\n                            currentDate={currentForeCastData.dt}\n                            timezone={currentForeCastData.timezone}\n                            city={currentForeCastData.name +  \", \" + currentForeCastData.sys.country}\n                            lat={currentForeCastData.coord.lat}\n                            lot={currentForeCastData.coord.lon}\n                            windSpeed={currentForeCastData.wind.speed}\n                            clouds={currentForeCastData.clouds.all}\n                            tempCur={currentForeCastData.main.temp}\n                            tempMin={currentForeCastData.main.temp_min}\n                            tempMax={currentForeCastData.main.temp_max}\n                            weatherMain={currentForeCastData.weather[0].main}\n                            weatherIcon={currentForeCastData.weather[0].icon}\n                            weatherDesc={currentForeCastData.weather[0].description}\n                        />\n                        <ForecastContainer\n                            fiveDaysForeCastData={fiveDaysForeCastData}\n                        />\n                    </div>\n                </LoadingContainer>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n\n    // console.log(state);\n\n    return {\n        ajaxStatus: state.ajaxStatus,\n        currentForeCastData: state.store.currentForeCastData,\n        fiveDaysForeCastData: state.store.fiveDaysForeCastData\n    };\n};\n\nexport default connect(\n    mapStateToProps,\n    { \n        fetchCurrentForecast,\n        fetchFiveDaysForecast\n    }\n)(MainContainer);\n","import {\n    FETCH_COMPLETE,\n    FETCH_PENDING,\n    SERVER_ERROR,\n    RESET_STATUS\n} from '../reducers/ajaxStatusReducer';\nimport {\n    FETCH_CURRENT_FORECAST,\n    FETCH_FIVE_DAYS_FORECAST\n} from '../reducers/storeReducer';\nimport axios from 'axios';\nimport apiConfig from './config';\n\n//Get Current Forecast, default is Hong Kong\n\nexport function fetchCurrentForecast(city) {\n    return async dispatch => {\n        const apiCity = city.replace(/\\s/g, \"+\");\n        let cityUrl = `${apiConfig.openWeather.API_URL}/weather?q=${apiCity}&${apiConfig.openWeather.PARAM}&appid=${apiConfig.openWeather.API_KEY}`;\n\n        dispatch({\n            type: FETCH_PENDING\n        });\n\n        try {\n            const response = await axios.get(cityUrl);\n\n            if (response.data){\n                dispatch({\n                    type: FETCH_CURRENT_FORECAST,\n                    currentForeCastData: response.data\n                });\n    \n                dispatch({\n                    type: FETCH_COMPLETE\n                });\n            }\n        } catch (error) {\n\n            console.log(\"error: \" + error);\n\n            dispatch({\n                type: SERVER_ERROR,\n                serverStatus: error.response.status,\n                serverMessage: error.response.data.message\n            });\n        }\n    };\n}\n\nexport function fetchFiveDaysForecast(city) {\n    return async dispatch => {\n        const apiCity = city.replace(/\\s/g, \"+\");\n        let forecastUrl = `${apiConfig.openWeather.API_URL}/forecast?q=${apiCity}&${apiConfig.openWeather.PARAM}&appid=${apiConfig.openWeather.API_KEY}`;\n\n        dispatch({\n            type: FETCH_PENDING\n        });\n\n        try {\n            const response = await axios.get(forecastUrl);\n\n            if (response.data){\n                dispatch({\n                    type: FETCH_FIVE_DAYS_FORECAST,\n                    fiveDaysForeCastData: response.data\n                });\n\n                dispatch({\n                    type: FETCH_COMPLETE\n                });\n            }    \n        } catch (error) {\n            dispatch({\n                type: SERVER_ERROR,\n                serverStatus: error.response.status,\n                serverMessage: error.response.data.message\n            });\n        }\n    };\n}\n\nexport function resetAjaxStatus() {\n    return (dispatch) => {\n        dispatch({\n            type: RESET_STATUS\n        })\n    }\n}"],"sourceRoot":""}