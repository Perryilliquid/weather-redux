{"version":3,"sources":["redux/actions/storeActions.js","components/loading/LoadingContainer.js","components/CurrentForecast.js","components/Forecast.js","components/ForecastDetails.js","containers/ForecastContainer.js","containers/MainContainer.js"],"names":["API_KEY","API_URI","PARAM","LoadingContainer","Fragment","this","props","loading","LoadingSpinner","children","Component","defaultProps","CurrentForeCast","city","windSpeed","clouds","tempCur","tempMin","tempMax","weatherMain","weatherIcon","weatherDesc","formatCurrentDate","moment","format","Card","className","CardBody","CardImg","src","alt","CardText","Forecast","date","showThreeHours","curDate","replace","formatDate","Button","color","onClick","ForecastDetails","Row","Col","MainContainer","state","showModal","currentCityId","searchCity","console","log","fetchCurrentForecast","changeHandler","e","target","value","setState","ajaxStatus","currentForeCastData","profile","currentCity","fiveDaysForecastData","isLoading","name","placeholder","onChange","CurrentForecast","key","id","currentDate","dt","lat","coord","lot","lon","wind","speed","all","main","temp","temp_min","temp_max","weather","icon","description","connect","store","dispatch","a","apiCity","cityUrl","type","FETCH_PENDING","axios","get","response","data","FETCH_CURRENT_FORECAST","FETCH_COMPLETE","SERVER_ERROR","serverStatus","status","serverMessage","message","fetchFiveDaysForecast","cityId","forecastUrl","FETCH_FIVE_DAYS_FORECAST","fiveDaysForeCastData"],"mappings":"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","file":"static/js/Home.fdbc7fba.chunk.js","sourcesContent":["import {\n    FETCH_COMPLETE,\n    FETCH_PENDING,\n    SERVER_ERROR,\n    SUBMIT_COMPLETE,\n    SUBMIT_PENDING,\n    RESET_STATUS\n} from '../reducers/ajaxStatusReducer';\nimport {\n    PROFILE_FETCH_DETAILS,\n    FETCH_CURRENT_FORECAST,\n    FETCH_FIVE_DAYS_FORECAST\n} from '../reducers/storeReducer';\nimport axios from 'axios';\n\n//an action is just a function\nconst API_KEY = '715ac60004286c422cbbbf1d407f9a12'\nconst API_URI = 'https://api.openweathermap.org/data/2.5'\nconst API_UNIT = 'metric'\nconst API_ICON_URI = 'https://openweathermap.org/img/wn/'\nconst PARAM = `type=like&sort=population&units=metric&cnt=7`\n\nexport function fetchCurrentForecast(city) {\n    return async dispatch => {\n        const apiCity = city.replace(/\\s/g, \"+\");\n        let cityUrl = `${API_URI}/weather?q=${apiCity}&${PARAM}&appid=${API_KEY}`;\n\n        dispatch({\n            type: FETCH_PENDING\n        });\n\n        try {\n            const response = await axios.get(cityUrl);\n\n            console.log(\"data: \" + response.data);\n\n            if (response.data){\n                dispatch({\n                    type: FETCH_CURRENT_FORECAST,\n                    currentCityId: response.data.id,\n                    currentForeCastData: response.data\n                });\n    \n                dispatch({\n                    type: FETCH_COMPLETE\n                });\n            }\n        } catch (error) {\n            dispatch({\n                type: SERVER_ERROR,\n                serverStatus: error.response.status,\n                serverMessage: error.response.data.message\n            });\n        }\n    };\n}\n\nexport function fetchFiveDaysForecast(cityId) {\n    return async dispatch => {\n        let forecastUrl = `${API_URI}/weather?id=${cityId}&${PARAM}&appid=${API_KEY}`;\n\n        dispatch({\n            type: FETCH_PENDING\n        });\n\n        try {\n            const response = await axios.get(forecastUrl);\n            \n            dispatch({\n                type: FETCH_FIVE_DAYS_FORECAST,\n                fiveDaysForeCastData: response.data\n            });\n\n            dispatch({\n                type: FETCH_COMPLETE\n            });\n\n        } catch (error) {\n            dispatch({\n                type: SERVER_ERROR,\n                serverStatus: error.response.status,\n                serverMessage: error.response.data.message\n            });\n        }\n    };\n}\n\nexport function fetchProfileDetails(id) {\n    return async (dispatch, getState) => {\n        dispatch({\n            type: FETCH_PENDING\n        });\n        try {\n            const response = await axios({\n                url: `https://jsonplaceholder.typicode.com/todos`,\n                method: 'get'\n            });\n\n            const data = {\n                id: 1,\n                name: 'Gongcha',\n                address: '45 Ho Tung Mau',\n                city: \"HCM\",\n                district: 'District 2',\n                image: { key: 'sofa_cat', format: 'jpg'},\n                phone: '1234568888',\n                redInvoice: {\n                    name: 'Alley',\n                    address: '67 Le Loi',\n                    district: 'District 1',\n                    city: 'HCM',\n                    taxCode: 'P12351566'\n                }\n            };\n\n            dispatch({\n                type: PROFILE_FETCH_DETAILS,\n                details: data\n            });\n\n            dispatch({\n                type: FETCH_COMPLETE\n            });\n        } catch (error) {\n            dispatch({\n                type: SERVER_ERROR,\n                serverStatus: error.response.status,\n                serverMessage: error.response.data.message\n            });\n        }\n    };\n}\n\n\nexport function updateStoreProfile(data) {\n    return async (dispatch, getState) => {\n        dispatch({\n            type: SUBMIT_PENDING\n        });\n        try {\n            const submitData = {\n                name: data.name,\n                address: data.address,\n                city: data.city,\n                district: data.district,\n                image: data.image,\n                phone: data.phone,\n                redInvoice: {\n                    name: data.companyName,\n                    address: data.companyAddress,\n                    district: data.companyDistrict,\n                    city: data.companyCity,\n                    taxCode: data.taxCode\n                }\n            };\n\n            const response = await axios({\n                url: `https://jsonplaceholder.typicode.com/posts/1`,\n                method: 'put',\n                data: submitData\n            });\n\n            dispatch({\n                type: PROFILE_FETCH_DETAILS,\n                details: submitData\n            });\n\n            dispatch({\n                type: SUBMIT_COMPLETE\n            });\n        } catch (error) {\n            dispatch({\n                type: SERVER_ERROR,\n                serverStatus: error.response.status,\n                serverMessage: error.response.data.message\n            });\n        }\n    };\n}\n\nexport function resetAjaxStatus() {\n    return (dispatch) => {\n        dispatch({\n            type: RESET_STATUS\n        })\n    }\n}","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport LoadingSpinner from './LoadingSpinner';\n\nexport default class LoadingContainer extends Component {\n  static propTypes = {\n    loading: PropTypes.bool,\n    children: PropTypes.node.isRequired\n  }\n\n  static defaultProps = {\n    loading: false\n  }\n\n  render() {\n    return (\n        <React.Fragment>\n            {this.props.loading ? <LoadingSpinner /> : this.props.children}\n        </React.Fragment>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    Card, CardImg, CardText, CardBody,\n    CardTitle, CardSubtitle, Button, Row, Col\n  } from 'reactstrap';\nimport moment from 'moment';\n\nconst CurrentForeCast = props => {\n    const {city,windSpeed,clouds,tempCur,tempMin,tempMax,weatherMain,weatherIcon,weatherDesc} = props;\n    const formatCurrentDate = moment().format('YYYY-MM-DD, dddd');\n\n    return ( \n        <Card className=\"currentForeCastContainer\">\n            <CardBody >\n                <CardImg className=\"weatherIcon txt-right\" src={`https://openweathermap.org/img/wn/${weatherIcon}.png`} alt={weatherMain} />\n                <h1>{city} </h1>\n                <p>{formatCurrentDate}</p>\n                <h2>{tempCur}°C</h2>\n                <span>Min: {tempMin}°C / Max: {tempMax}°C</span>\n                <h4>{weatherMain}</h4>\n                <CardText className=\"weatherDesc\">{weatherDesc}</CardText>\n                <CardText>Wind Speed: {windSpeed} </CardText>\n                <CardText>Cloud: {clouds} </CardText>\n            </CardBody>\n        </Card>\n    );\n}\n\nexport default CurrentForeCast;","import React from 'react';\nimport {\n    Card, CardImg, CardText, CardBody, Button\n  } from 'reactstrap';\nimport moment from 'moment';\n  \nconst Forecast = props => {\n    const {date,tempCur,tempMin,tempMax,weatherMain,weatherIcon,showThreeHours} = props;\n    let curDate  = date.replace('00:00:00','');\n    let formatDate = moment(curDate).format('YYYY-MM-DD, dddd');\n\n    return ( \n      <React.Fragment>\n            <Card className=\"forecast\">\n                <CardBody className=\"\">\n                    <h5 className=\"weatherDate\">{formatDate}</h5>\n                    <CardImg src={`https://openweathermap.org/img/wn/${weatherIcon}.png`} alt={weatherMain} /> \n                    <h2>{tempCur}°C</h2>\n                    <CardText>{tempMin}°C / <b>{tempMax}°C</b></CardText>\n                    <Button color=\"secondary\" onClick={() => showThreeHours(curDate)}>Show Details</Button>\n                </CardBody>\n            </Card>\n        </React.Fragment>\n    )    \n}\n \nexport default Forecast","import React from 'react';\nimport { Card, CardImg, CardText, CardBody, Row, Col } from 'reactstrap';\nimport moment from 'moment';\n  \nconst ForecastDetails = props => {\n    const {date,tempCur,tempMin,tempMax,weatherMain,weatherIcon,weatherDesc,windSpeed} = props;\n    let formatDate = moment(date).format('YYYY-MM-DD, dddd hh:mm A');\n\n    return ( \n      <React.Fragment>\n            <Card className=\"forecastDetails\">\n                <CardBody>\n                    <Row>\n                        <Col>\n                            <h5 className=\"weatherDate\">{formatDate}</h5>\n                            <CardImg src={`https://openweathermap.org/img/wn/${weatherIcon}.png`} alt={weatherMain} /> \n                            <h2>{tempCur}°C</h2>\n                            <CardText>{tempMin}°C / <b>{tempMax}°C</b></CardText>\n                        </Col>\n                        <Col>\n                            <h4>{weatherMain}</h4>\n                            <CardText className=\"weatherDesc\">{weatherDesc}</CardText>\n                            <CardText>Wind Speed: {windSpeed} </CardText>\n                        </Col>\n                    </Row>\n                    \n                </CardBody>\n            </Card>\n        </React.Fragment>\n    )    \n}\n \nexport default ForecastDetails","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Table } from 'reactstrap';\n\nimport Forecast from '../components/Forecast';  //Show Forecast Preview by 5 days\nimport ForecastDetails from '../components/ForecastDetails';    //Show Details by 3 hours\n\nclass ForecastContainer extends Component {\n    constructor (props){\n        super(props);\n        this.state = {\n            isOpenModal: false,\n            threeHoursData: {}\n        }\n    }\n\n    static propTypes = {\n        fiveDaysForecast: PropTypes.object.isRequired,\n    };\n\n    showThreeHours = (selectedDate) => {\n\n        // console.log(this.state.isOpenModal);\n\n        this.setState({\n            isOpenModal: !this.state.isOpenModal\n        });\n\n        const threeHoursData = this.props.fiveDaysForecast.fiveDaysForecast.list.filter(F => F.dt_txt.includes(selectedDate));\n        this.setState({\n            threeHoursData\n        });\n        // console.log(threeHoursData);\n    }\n\n    closeThreeHours = () => {\n        this.setState({\n            isOpenModal: !this.state.isOpenModal\n        });\n    }\n\n    render() {\n\n        const fiveDaysForecastData = this.props.fiveDaysForecast.fiveDaysForecast.list.filter(F => F.dt_txt.includes('00:00:00'));\n        const {isOpenModal, threeHoursData} = this.state;\n\n        return (\n            <React.Fragment>\n                <div className=\"forecastContainer\">\n                    {\n                        Object.values(fiveDaysForecastData).map((item, index) =>{\n                            return(\n                                <Forecast\n                                    key={index}\n                                    date={item.dt_txt}\n                                    windSpeed={item.wind.speed}\n                                    clouds={item.clouds}\n                                    tempCur={item.main.temp}\n                                    tempMin={item.main.temp_min}\n                                    tempMax={item.main.temp_max}\n                                    weatherMain={item.weather[0].main}\n                                    weatherIcon={item.weather[0].icon}\n                                    showThreeHours={this.showThreeHours}\n                                />\n                            )\n                        })\n                    }\n                    {threeHoursData && <div className=\"foreCastDetailsContainer\">\n                        {\n                            Object.values(threeHoursData).map((item, index) =>{\n                                return (\n                                    <ForecastDetails\n                                        key={index}\n                                        date={item.dt_txt}\n                                        windSpeed={item.wind.speed}\n                                        clouds={item.clouds}\n                                        tempCur={item.main.temp}\n                                        tempMin={item.main.temp_min}\n                                        tempMax={item.main.temp_max}\n                                        weatherMain={item.weather[0].main}\n                                        weatherIcon={item.weather[0].icon}\n                                        weatherDesc={item.weather[0].description}\n                                    />\n                                )\n                            })\n                        }\n                        </div>\n                    }\n                </div>\n            </React.Fragment>\n         \n         );\n    }\n}\n \nexport default ForecastContainer;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { fetchCurrentForecast, fetchFiveDaysForecast } from '../redux/actions/storeActions';\nimport LoadingContainer from '../components/loading/LoadingContainer';\nimport CurrentForecast from '../components/CurrentForecast';\nimport FiveDaysForecastContainer from './ForecastContainer';\n\nexport class MainContainer extends Component {\n    static propTypes = {\n        ajaxStatus: PropTypes.object.isRequired,\n        fetchCurrentForecast: PropTypes.func.isRequired,\n        fetchFiveDaysForecast: PropTypes.func.isRequired\n    };\n\n    state = {\n        showModal: false,\n        city: 'Hong Kong',\n        currentCityId: 1819729, //Hong Kong Id\n    }\n\n    componentDidMount() {\n        this.props.fetchCurrentForecast(this.state.city);\n    }\n\n    searchCity = () =>{\n        console.log(this.state.city);\n        this.props.fetchCurrentForecast(this.state.city);\n    }\n\n    changeHandler = (e) =>{\n        //get the value from the input\n        let city = e.target.value;\n    //store the value in the state property\n        this.setState({\n        city\n        });\n        \n    }\n\n    render() {\n        const { ajaxStatus, profile, currentCity, currentForeCastData, fiveDaysForecastData } = this.props;\n        console.log(\"temp: \" + currentForeCastData);\n\n        return (\n            <div className=\"container\">\n                <h1 className=\"header\">Weather App </h1>\n                <LoadingContainer loading={ajaxStatus.isLoading}>\n                    <div className=\"locationForm\">\n                        <input name=\"city\" placeholder=\"Hong Kong\" onChange={this.changeHandler} />\n                        <button onClick={this.searchCity}> <i className=\"fas fa-search\"></i> </button>\n                    </div>\n                    <div className=\"dashboard\">\n                        <CurrentForecast\n                            key={currentForeCastData.id}\n                            currentDate={currentForeCastData.dt}\n                            city={currentForeCastData.name}\n                            lat={currentForeCastData.coord.lat}\n                            lot={currentForeCastData.coord.lon}\n                            windSpeed={currentForeCastData.wind.speed}\n                            clouds={currentForeCastData.clouds.all}\n                            tempCur={currentForeCastData.main.temp}\n                            tempMin={currentForeCastData.main.temp_min}\n                            tempMax={currentForeCastData.main.temp_max}\n                            weatherMain={currentForeCastData.weather[0].main}\n                            weatherIcon={currentForeCastData.weather[0].icon}\n                            weatherDesc={currentForeCastData.weather[0].description}\n                        />\n                        {/* {!fiveDaysForecastData.isEmpty && <FiveDaysForecastContainer \n                            fiveDaysForecastData={fiveDaysForecastData}\n                        />} */}\n                    </div>\n                </LoadingContainer>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n\n    return {\n        ajaxStatus: state.ajaxStatus,\n        currentCityId: state.store.currentCityId,\n        currentForeCastData: state.store.currentForeCastData,\n        fiveDaysForecastData: state.store.fiveDaysForecastData\n    };\n};\n\nexport default connect(\n    mapStateToProps,\n    { \n        fetchCurrentForecast,\n        fetchFiveDaysForecast\n    }\n)(MainContainer);\n"],"sourceRoot":""}